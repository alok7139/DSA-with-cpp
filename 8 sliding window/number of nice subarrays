/*
Given an array of integers nums and an integer k. A continuous subarray is called nice if there are k odd numbers on it.

Return the number of nice sub-arrays.

 

Example 1:

Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].
*/
    int numberOfSubarrays(vector<int>& arr, int k) {
        // return atmost(arr,k)-atmost(arr,k-1);


        // approach would be even convert to 0 and odd convert to 1
        int n=arr.size();
        // for(int i=0;i<n;i++){
        //     if(arr[i]%2==0){
        //         arr[i]=0;
        //     }
        //     else{
        //         arr[i]=1;
        //     }
        // }
        unordered_map<int,int>p;
        int count=0;
        int sum=0;
        for(int i=0;i<n;i++){
            if(arr[i]%2==0){
                arr[i]=0;
            }
            else{
                arr[i]=1;
            }
            sum += arr[i];
            if(sum==k){
                count++;
            }
            if(p.find(sum-k)!=p.end()){
                count += p[sum-k];
            }
            p[sum]++;
        }
        return count;

        
    }
    int atmost(vector<int> &arr, int k){
        map<int,int>p;
        p[0]=0;
        int len=0,left=0,count=0;
        for(int right=0;right<arr.size();right++){
            p[arr[right]%2]++;
            len++;
            while(len>k+p[0]){
               len--;
               p[arr[left]%2]--;
               left++;
            }
            count+=len;
        }
        return count;
    }
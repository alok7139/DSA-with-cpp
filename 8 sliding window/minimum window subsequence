/*
You are given two strings ‘S’ and ‘T’. Your task is to find the minimum (Contiguous) substring ‘W’ of ‘S’, such that ‘T’ is a subsequence of ‘W’

A subsequence is a sequence that can be derived from another sequence by removing zero or more elements, without changing the order.

A substring is a contiguous part of a string.

For example:
For the given string “CodingNinjas”: “Ninja” is a substring while “dinas” is a subsequence. 
If there is no such Window in ‘S’ that covers all characters in ‘T’, return an empty string "". If there are multiple such minimum length windows, return the one with the smallest starting index.
*/
#include <bits/stdc++.h>
string minWindow(string s, string t)
{
	// Write your Code here
	 int n=s.size();
	int m=t.size();
	int len=INT_MAX;
	int minindex=-1;
	for(int i=0;i<n;i++){
		if(s[i]==t[0]){
			int ind1 = i+1;
			int ind2 = 1;
			while(ind1<n and ind2<m){
				if(s[ind1]==t[ind2]){
					ind2++;
				}
				ind1++;
			}
			if(ind2 >= m){
				if(ind1-i<len){
					minindex=i;
					len=ind1-i;
					
				}
			}
		}
	}
	if(minindex==-1){
		return "";
	}
	return s.substr(minindex,len);
	 
	
}
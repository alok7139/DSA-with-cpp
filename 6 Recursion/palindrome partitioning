/*
Given a string s, partition s such that every 
substring
 of the partition is a 
palindrome
. Return all possible palindrome partitioning of s.

 

Example 1:

Input: s = "aab"
Output: [["a","a","b"],["aa","b"]]
*/
    vector<vector<string>> partition(string s) {
        vector<vector<string>>ans;
        vector<string>v;
        int ind=0;
        generate(ans,s,v,ind);
        return ans;
    }
    void generate(vector<vector<string>>&ans,string &s,vector<string>&v,int ind){
        if(ind>=s.size()){
            ans.push_back(v);
            return ;
        }
        for(int i=ind;i<s.size();i++){
            if(checker(s,ind,i)){
                v.push_back(s.substr(ind,i-ind+1));
                generate(ans,s,v,i+1);
                v.pop_back();
            }
        }
    }
    bool checker(string &s,int left, int right){
        if(s.size()==0){
            return true;
        }
        while(left<right){
            if(s[left]==s[right]){
                left++;
                right--;
            }
            else{
                return false;
            }
        }
        return true;
    }
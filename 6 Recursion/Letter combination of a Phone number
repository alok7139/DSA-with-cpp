/*
Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


 

Example 1:

Input: digits = "23"
Output: ["ad","ae","af","bd","be","bf","cd","ce","cf"]
*/
 void solve(vector<string>&an,string digits,string output, int ind, string map[]){
        if(ind==digits.size()){
            an.push_back(output);
            return ;
        }
        int number=digits[ind]-'0';
        string val = map[number];
        for(int i=0;i<val.length();i++){
            output.push_back(val[i]);
            solve(an,digits,output,ind+1,map);
            output.pop_back();
        }
    }
    vector<string> letterCombinations(string digits) {
        vector<string>ans;
        if(digits.size()==0)    return ans;

        string output;
        int ind=0;
        string map[10]={"0","1","abc","def","ghi","jkl","mno","pqrs","tuv","wxyz"};
        solve(ans,digits,output,ind,map);
        return ans;
    }
/*
Given an m x n grid of characters board and a string word, return true if word exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.

 

Example 1:


Input: board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"
Output: true
*/
    bool exist(vector<vector<char>>& board, string word) {
           int ind=0;
           int n = board.size();//row
           int m = board[0].size();//col
           for(int i=0;i<n;i++){
               for(int j=0;j<m;j++){
                   if(board[i][j]==word[ind]){
                       if(search(board,word,i,j,n,m,ind))
                       return true;
                   }
               }
           }
           return false;
    }
    bool search(vector<vector<char>>& board,string word,int row, int col,int n,int m,int ind){
        if(ind==word.size())
        return true;

        if(row<0 or col<0 or row==n or col==m or board[row][col]!=word[ind] or board[row][col] =='0'){
            return false;
        }

          char c = board[row][col];
          board[row][col]='0';
          bool top = search(board,word,row-1,col,n,m,ind+1);
          bool bottom = search(board,word,row+1,col,n,m,ind+1);
          bool right= search(board,word,row,col+1,n,m,ind+1);
          bool left = search(board,word,row,col-1,n,m,ind+1);

           board[row][col]=c;
          return top || bottom || right || left;
    }
/*
Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
*/
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        vector<vector<int>>ans;
        vector<int>v;
        generate(ans,candidates,v,target,0);
        return ans;
    }
    void generate(vector<vector<int>>&ans,vector<int>&arr,vector<int>&v,int target,int ind){
        if(target==0){
            ans.push_back(v);
            return ;
        }
        for(int i=ind;i<arr.size();i++){
            if(i>ind and arr[i]==arr[i-1])continue;
            if(arr[i]>target) break;

            v.push_back(arr[i]);
            generate(ans,arr,v,target-arr[i],i+1);
            v.pop_back();
        }
    }
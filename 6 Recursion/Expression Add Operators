/*
Given a string num that contains only digits and an integer target, return all possibilities to insert the binary operators '+', '-', and/or '*' between the digits of num so that the resultant expression evaluates to the target value.

Note that operands in the returned expressions should not contain leading zeros.

 

Example 1:

Input: num = "123", target = 6
Output: ["1*2*3","1+2+3"]
Explanation: Both "1*2*3" and "1+2+3" evaluate to 6.
*/
    vector<string> addOperators(string num, int target) {
        vector<string>ans;
        string output="";
        int ind=0;
        long prev=0,res=0;
        generate(ans,num,target,output,ind,prev,res);
        return ans;
    }
    void generate(vector<string>&ans,string &num,int target,string output,int ind,long prev,long res){
    if(ind==num.size()){
        if(res ==target){
            ans.push_back(output);
        }
        return ;
    }
    for(int i=ind;i<num.size();i++){
        if(i>ind and num[i]=='0')break;
        long number = stol(num.substr(ind,i-ind+1));
        string temp = num.substr(ind,i-ind+1);
        if(ind==0){
            generate(ans,num,target,temp,i+1,number,number);
        }
        else{
            generate(ans,num,target,output + '+' +temp,i+1, number, res+number);
            generate(ans,num,target,output+'-'+temp,i+1,-number,res-number);
            generate(ans,num,target,output+'*'+temp,i+1,prev*number,res-prev+(prev*number));
        }
    }

        
    }
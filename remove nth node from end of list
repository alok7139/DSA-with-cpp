/*
Given the head of a linked list, remove the nth node from the end of the list and return its head.

 

Example 1:


Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

*/
    ListNode *reverse(ListNode*head){
        if(head==nullptr or head->next==nullptr){
            return head;
        }
        ListNode * getreverse=reverse(head->next);
        head->next->next=head;
        head->next=nullptr;
        return getreverse;
    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        /*int len=0;
        ListNode*temp1=head;
        while(temp1!=nullptr){
            len++;
            temp1=temp1->next;
        }
        if(len==n){
            head=head->next;
            return head;
        }*/
        if(n<1){
            return head;
        }
        if(head==nullptr or head->next==nullptr){
            return nullptr;
        }
        ListNode *newnode=reverse(head);
        ListNode *temp=newnode;
        int count=1;
        if(n==1){
            head=newnode->next;
            delete newnode;
            return reverse(head);
        }
        while(count<n-1){
            temp=temp->next;
            count++;
        }
       
        temp->next=temp->next->next;
        return reverse(newnode);
    }
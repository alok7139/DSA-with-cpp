/*
Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:

Search for a node to remove.
If the node is found, delete the node.
 

Example 1:


Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.
One valid answer is [5,4,6,2,null,null,7], shown in the above BST.
Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.
*/

    TreeNode* deleteNode(TreeNode* root, int key) {
        if(root==nullptr){
            return nullptr;
        }
        if(root->val==key){
            return helper(root);
        }
        TreeNode*temp=root;
        while(root){
            if(root->val > key){
                if(root->left and root->left->val==key){
                    root->left=helper(root->left);
                }
                else{
                    root=root->left;
                }
            }
            else{
                if(root->right and root->right->val==key){
                    root->right=helper(root->right);
                }
                else{
                    root=root->right;
                }
            }
        }
        return temp;
        
    }
    TreeNode* helper(TreeNode*root){
        if(root->left==nullptr){
            return root->right;
        }
        if(root->right==nullptr){
            return root->left;
        }
        TreeNode* leftchild=root->left;
        TreeNode * rightleftchild = find(root->right);
        rightleftchild->left=leftchild;
        return root->right;
    }
    TreeNode* find(TreeNode*root){
        if(root->left==nullptr){
              return root;
        }
        return find(root->left);
    }
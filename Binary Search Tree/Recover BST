/*
You are given the root of a binary search tree (BST), where the values of exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

 

Example 1:


Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.
*/

void recoverTree(TreeNode* root) {
    TreeNode*first=NULL;
    TreeNode*last=NULL;
    TreeNode*middle=NULL;
    TreeNode* prev=new TreeNode(INT_MIN);
    inorder(root,first,prev,middle,last);
     if(first and last) swap(first->val,last->val);
     else  if(first and middle) swap(first->val,middle->val);
    
}
void inorder(TreeNode* root,TreeNode*& first,TreeNode*& prev,TreeNode* &middle,TreeNode* &last){
    if(root==nullptr){
        return;
    }
    inorder(root->left,first,prev,middle,last);
    if(prev!=nullptr and prev->val > root->val){
        if(first==nullptr){
            first=prev;
            middle=root;
        }
        else{
            last=root;
        }
    }
    prev=root;
    inorder(root->right,first,prev,middle,last);
}
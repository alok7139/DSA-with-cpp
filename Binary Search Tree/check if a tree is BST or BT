/*
Given the root of a binary tree, determine if it is a valid binary search tree (BST).

A valid BST is defined as follows:

The left 
subtree
 of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [2,1,3]
Output: true
*/

    bool isValidBST(TreeNode* root) {
        return checkbst(root,LONG_MIN,LONG_MAX);
        
    }
    bool checkbst(TreeNode*root,long mini,long maxi){
	if(root==nullptr){
		return true;
	}
	if(root->val <= mini or root->val >= maxi){
		return false;
	}

	bool leftcheck=checkbst(root->left, mini, root->val);
	bool rightcheck=checkbst(root->right, root->val ,  maxi);
	return leftcheck && rightcheck;
}